"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
# Вариант 1
def numbers_two(num, x = 0, y = 0):
    if num < 1:
        return x, y
    if num % 2 == 0:
        x += 1
    else:
        y += 1
    return numbers_two((num) // 10, x, y)

print(numbers_two(23445551234))


# Вариант 2
def numbers(num, x = [0, 0]):
    if len(str(num)) < 1:
        return x
    if int(str(num)[-1]) % 2 == 0:
        x[0] += 1
    else:
        x[1] += 1
    return numbers(str(num)[:-1])

print(numbers(23445551234))

